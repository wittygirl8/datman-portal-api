# @format

# service: dml #--live fo portal
service: dmlportal #--live fo portal

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  # stage: prod
  #stage: dev
  stage: loc
  region: ${opt:region,'eu-west-1'}
  timeout: 30
  tracing:
    lambda: true
  environment:
    PROD_DB_CRED: ${ssm:/prod/db/stripe_db_user}
    PROD_DB_CRED_SNAPSHOT: ${ssm:/stage/PROD_DB_CRED_SNAPSHOT}

    PROD_STRIPE_CREDENTIALS: ${ssm:/prod/stripe_credentials}

    PROD_REACH_SMS: ${ssm:/prod/t2s/reachsms}
    AWS_SES_CRED: ${ssm:/stage/datman/ses/aws}

    PROD_S3_CRED: ${ssm:/prod/s3-uploads}
    SUB_FOLDER_SALT: ${ssm:/prod/s3_subfolder_salt}

    PROD_MANDRIL: ${ssm:/prod/mandril}

    STAGE_STRIPE_CREDENTIALS: ${ssm:/stage/stripe_credentials}

    MODE: ${self:provider.stage}
    ACCESS_TOKEN_JWT_SECRET: ${ssm:/prod/jwt/access_token}
    REFRESH_TOKEN_JWT_SECRET: "TEST-SECRET-JWT-REFRESH"
    JWT_ACCESS_TOKEN_EXP_TIME: "15m"
    WITHOUT_REMEMBER_ME_RF_TOKEN_EXP_TIME: "24h"
    WITH_REMEMBER_ME_RF_TOKEN_EXP_TIME: "180d"
    DEFAULT_TIMEZONE: "Europe/London"

    CARDSTREAM_API_ENDPOINT: ${ssm:/prod/cardstream/cardstream_api_endpoint}
    CS_API_USERNAME: ${ssm:/prod/cardstream/user}
    CS_API_PASSWORD: ${ssm:/prod/cardstream/pass}
    RESELLER_ID: ${ssm:/prod/cardstream/reseller_id}

    MYPAY_REDIRECT_URL: ${ssm:/prod/mypay_redirect_url}
    KOUNT_CHARGEBACK_URL: ${ssm:/prod/kount_chargeback_url}
    USER_POOL_ID: "eu-west-1_mPGEDp7cA"
    REGION: "eu-west-1"
    # DNA_WEBHOOK_URL: ${ssm:/prod/gateway/dna_webhook}
    # DNA_RETURN_URL: "https://portal.omni-pay.com/virtual-terminal"
    # DNA_TERMINAL_ID: ${ssm:}
    # DNA_CLIENT_SECRET: "t*8s=AaNQMPQYGcJpXaU3mn-u7t=vS3cek7hh2LCbQDcj2BLgngH*7jv0$Eh7bjI"
    # DNA_CLIENT_ID: "optomany_test_integrations"
    # DNA_SCOPE: "payment integration_hosted"
    DNA_AUTH_URL: "https://oauth.dnapayments.com/oauth2/token"
    DNA_WEBHOOK_URL: ${ssm:/prod/gateway/dna_webhook}
    DNA_RETURN_URL: "https://portal.omni-pay.com/virtual-terminal"
    DNA_TERMINAL_ID: ${ssm:/prod/gateway/dna_terminal}
    DNA_CLIENT_SECRET: ${ssm:/prod/gateway/dna_client_secret}
    DNA_CLIENT_ID: ${ssm:/prod/gateway/dna_client_id}
    DNA_SCOPE: "pay_by_link"
    # DNA_AUTH_URL: ${ssm:/prod/gateway/base_url_dna}
    DNA_SDK_URL: "https://pay.dnapayments.com/checkout/payment-api.js"
    BIFROST_ENDPOINTS: ${ssm:/cp/prod/cp/BifrostAPIEndpoint}
    BIFROST_API_TOKEN: ${ssm:/cp/prod/cp/BifrostAPIKey}
    DNA_REFUND_URL: ${ssm:/gateway/prod/gateway/DnaRefundAPI}
    ENCRYPTION_KEY: ${ssm:/gateway/prod/gateway/RefundEncryptionKey}
    DNA_IS_TEST_MODE: true
    EMAIL_QUEUE_URL: ${ssm:/gateway/prod/gateway/SendReceiptQueue}
    DNA_API_URL: ${ssm:/gateway/prod/gateway/DnaApiUrl}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:listQueues
        - sqs:getQueueAttributes
        - sqs:receiveMessage
        - sqs:deleteMessage
        - sqs:sendMessage
      Resource: '*'

  vpc:
    securityGroupIds:
      - ${ssm:/prod/sg}
    subnetIds:
      - ${ssm:/prod/subnet-private}
      - ${ssm:/prod/subnet-private/2}

functions:
  # genric_refund: ${file(serverless_config/refund/ep_refund.yaml)}

  #auth
  Authlogin: ${file(serverless_config/auth/ep_auth.yaml)}
  authorize: ${file(serverless_config/auth/ep_authorize.yaml)}
  authorizeAdmin: ${file(serverless_config/auth/ep_authorize_admin.yaml)}
  authorizeReseller: ${file(serverless_config/auth/ep_authorize_reseller.yaml)}
  authorizeSuperAdmin: ${file(serverless_config/auth/ep_authorize_super_admin.yaml)}
  AuthRefreshToken: ${file(serverless_config/auth/ep_refreshToken.yaml)}

  #payment
  PaymentAccountBalance: ${file(serverless_config/payment/ep_account_balance.yaml)}
  PaymentAccountBalanceInTransit: ${file(serverless_config/payment/ep_account_balance_in_transit.yaml)}
  PaymentListTransaction: ${file(serverless_config/payment/ep_list_transaction.yaml)}
  PaymentListTransactionV2: ${file(serverless_config/payment/ep_list_transactionV2.yaml)}
  PaymentListTransactionV3: ${file(serverless_config/payment/ep_list_transactionV3.yaml)}
  PaymentListTransactionV4: ${file(serverless_config/payment/ep_list_transactionV4.yaml)}
  PaymentListTransactionV5: ${file(serverless_config/payment/ep_list_transactionV5.yaml)}
  PaymentCrmPdqTransactios: ${file(serverless_config/payment/ep_crm_pdq_transactions.yaml)}
  PaymentCrmInvoice: ${file(serverless_config/payment/ep_crm_invoice.yaml)}
  PaymentListPayouts: ${file(serverless_config/payment/ep_list_payouts.yaml)}
  PayoutListTransactios: ${file(serverless_config/payment/ep_payout_transactions.yaml)}
  RunPaymentsReport: ${file(serverless_config/payment/ep_run_report.yaml)}
  FetchPaymentsReport: ${file(serverless_config/payment/ep_fetch_report.yaml)}
  PaymentCreateSaleVt: ${file(serverless_config/mypay/ep_create_sale_virtual_terminal.yaml)}
  PaymentCreateSessionPaybylink: ${file(serverless_config/mypay/ep_create_session_paybylink.yaml)}
  PaymentLarge: ${file(serverless_config/payment/ep_large_payments.yaml)}
  PaymentFeeDetails: ${file(serverless_config/payment/ep_transaction_fee_details.yaml)}
  PaymentMonthlyTransactions: ${file(serverless_config/payment/ep_get_monthly_payments.yaml)}
  PaymentDnaHostedForm: ${file(serverless_config/mypay/ep_dna_hosted.yaml)}
  PaymentDnaWebhook: ${file(serverless_config/mypay/ep_dna_webhook.yaml)}
  PaymentDnaRedirect: ${file(serverless_config/mypay/ep_dna_redirect.yaml)}
  PaymentListSearch: ${file(serverless_config/payment/ep_list_search.yaml)}

  #withdrawal
  WithdrawalWithdrawalRequestList: ${file(serverless_config/withdrawal/ep_withdrawal_request.yaml)}
  WithdrawalCreateWithdrawalRequest1: ${file(serverless_config/withdrawal/ep_create_withdrawal_request.yaml)}
  WithdrawalMarkBatches: ${file(serverless_config/withdrawal/ep_mark_withdrawals.yaml)}
  WithdrawalNotRecieved: ${file(serverless_config/withdrawal/ep_list_withdrawals_not_received.yaml)}
  WithdrawalNotBatched: ${file(serverless_config/withdrawal/ep_delete_withdrawals_not_batched.yaml)}
  WithdrawalReverseWithdrawalRequest: ${file(serverless_config/withdrawal/ep_withdrawal_reversal_request.yaml)}
  WithdrawalWithdrawalRequestListV2: ${file(serverless_config/withdrawal/ep_withdrawal_request_list.yaml)}

  #Customer
  CustomerUpdateAddress: ${file(serverless_config/customer/ep_update_address.yaml)}
  CustomerFetchAddress: ${file(serverless_config/customer/ep_fetch_address.yaml)}
  CustomerUpdatePassword: ${file(serverless_config/customer/ep_update_password.yaml)}
  CustomerUploadDocuments: ${file(serverless_config/customer/ep_upload_documents.yaml)}
  CustomerGetDocuments: ${file(serverless_config/customer/ep_get_documents.yaml)}
  CustomerUpdateBankDetails: ${file(serverless_config/customer/ep_customer_bank_details.yaml)}
  CustomerConfig: ${file(serverless_config/customer/ep_customer_config.yaml)}
  CustomerBankDetailsValidation: ${file(serverless_config/customer/ep_bank_details_validation.yaml)}
  CustomerBankUpdateKeyValidation: ${file(serverless_config/customer/ep_bank_update_key_validation.yaml)} # scheduler
  CustomerBankDetailsUpdateAttempt: ${file(serverless_config/customer/ep_bank_details_update_attempt.yaml)} # scheduler
  CustomerFetchFeeTierNames: ${file(serverless_config/customer/ep_get_fee_tier_names.yaml)}
  CustomerUpdateFeeTier: ${file(serverless_config/customer/ep_update_fee_tier.yaml)}

  # internal transfer
  ItGetFee: ${file(serverless_config/internal-transfer/ep_get_fee.yaml)}
  ItGetTransactions: ${file(serverless_config/internal-transfer/ep_get_internal_transfer_transactions.yaml)}
  ItActions: ${file(serverless_config/internal-transfer/ep_internal_transfer_actions.yaml)}

  #miscellaneous
  MissResetPasswordCrm: ${file(serverless_config/reset_password/ep_reset.yaml)}
  MissCrmRefund: ${file(serverless_config/refund/ep_portal_refund.yaml)}
  MissCrmRefundHistory: ${file(serverless_config/refund/ep_portal_refund_history.yaml)}
  MissCreateAf: ${file(serverless_config/account-verification/ep_create_account_verification_request.yaml)}
  MissCrmRefundSearch: ${file(serverless_config/refund/ep_search_refund.yaml)}
  MissCrmRefundStatusUpdate: ${file(serverless_config/refund/ep_update_refund_status.yaml)}
  # MissUpdatePasswordMypay: ${file(serverless_config/reset_password/ep_update_password.yaml)}

  #CustomerOnboard
  OnboardClient: ${file(serverless_config/mypay-customer-onboard/ep_create_client.yaml)}
  OnboardMerchant: ${file(serverless_config/mypay-customer-onboard/ep_create_merchant.yaml)}

  #Contract
  ContractUpdate: ${file(serverless_config/contracts/ep_update_contract.yaml)}
  ContractGet: ${file(serverless_config/contracts/ep_get_contract.yaml)}

  #ChargeBack
  ChargeBackList: ${file(serverless_config/chargeback/ep_list_chargeback.yaml)}
  ChargeBackCreate: ${file(serverless_config/chargeback/ep_create_chargeback.yaml)}
  ChargeBackSearchTransaction: ${file(serverless_config/chargeback/ep_search_chargeback_transactions.yaml)}
  ChargeBackDetails: ${file(serverless_config/chargeback/ep_fetch_chargeback_details.yaml)}

  #SpecialRent
  SpecialRentCreate: ${file(serverless_config/contracts/ep_create_special_rent.yaml)}
  SpecialRentGet: ${file(serverless_config/contracts/ep_get_special_rent.yaml)}
  SpecialRentUpdate: ${file(serverless_config/contracts/ep_update_special_rent.yaml)}
  SpecialRentDelete: ${file(serverless_config/contracts/ep_delete_special_rent.yaml)}
  CreditAdd: ${file(serverless_config/credit/ep_add_credit.yaml)}

  #Bank
  BankErrorGet: ${file(serverless_config/bank/ep_get_bank_error.yaml)}

  #FeeTier
  FeeTierCreate: ${file(serverless_config/fee-tiers/ep_create_fee_tier.yaml)}

  # IVR
  CheckCallerInfo: ${file(serverless_config/ivr/ep_check_caller_info.yaml)}
  WithdrawalStatus: ${file(serverless_config/ivr/ep_withdrawal_status.yaml)}
  BankUpdateDemo: ${file(serverless_config/ivr/ep_bank_update_demo.yaml)}
  ResetPasswordIvr: ${file(serverless_config/ivr/ep_reset_password_ivr.yaml)}
  #Invoice
  InvoiceCreate: ${file(serverless_config/invoice/ep_create_invoice.yaml)}
  InvoiceDelete: ${file(serverless_config/invoice/ep_delete_invoice.yaml)}
  InvoiceUpdate: ${file(serverless_config/invoice/ep_mark_invoice_paid.yaml)}

  #Reports
  ReconciliationReports : ${file(serverless_config/reports/ep_create_balance_report.yaml)}
  
resources:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

custom:
  enableKeepWarm: false
  splitStacks:
    custom: splitter.js
  documentation: ${file(serverless_config/serverless.docs.yaml):documentation}
# customAuth:
#   handler: services/auths/handler.authorize
#   authorizerSettings:
#     resultTtlInSeconds: 0
#     identityValidationExpression: .*
plugins:
  - serverless-offline
  - serverless-plugin-split-stacks
  - "@conqa/serverless-openapi-documentation"
