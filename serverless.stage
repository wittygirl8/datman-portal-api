service: datman-serverless-api
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  timeout: 30
  tracing:
    lambda: true
  # environment:
  #   PROD_DB_CRED_SNAPSHOT: ${ssm:/stage/PROD_DB_CRED_SNAPSHOT}
  #   PROD_REACH_SMS: ${ssm:/prod/t2s/reachsms}
  #   AWS_SES_CRED: ${ssm:/stage/datman/ses/aws}
  #   STRIPE_STAGE_SK: ${ssm:/stage/stripe/sk}
  #   STRIPE_STAGE_PK: ${ssm:/stage/stripe/pk}
  # vpc:
  #   securityGroupIds:
  #     - ${ssm:/prod/sg}
  #   subnetIds:
  #     - ${ssm:/prod/subnet-private}
  #     - ${ssm:/prod/subnet-private/2}







# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
 


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  resetPassword:
    handler: services/password-reset/handler.resetPassword
    events:
      - http:
          path: reset-password
          method: post
  stripePay:
    handler: services/stripe/handler.stripePay
    events:
      - http:
          path: stripe-pay
          method: post
  stripePaymentStatus:
    handler: services/stripe/handler.stripePaymentStatus
    events:
      - http:
          path: stripe-pay-status
          method: post
  test:
    handler: services/stripe/handler.teststripe
    events:
      - http:
          path: test
          method: get

  

    
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
